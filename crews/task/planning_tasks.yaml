create_execution_plan:
  description: >
    제공된 폼 유형들을 처리하기 위한 포괄적인 실행 계획을 생성합니다.
    
    입력 데이터:
    - Topic: {topic}
    - Form Types: {form_types}
    
    중요한 실행 규칙:
    1. **엄격한 단계 순서**: 리포트 → 슬라이드 → 텍스트 (단계 겹침 절대 금지)
    2. **기존 유형만 사용**: 입력 form_types에 실제로 존재하는 폼 유형에 대해서만 계획 생성
    3. **가상 폼 금지**: 제공된 form_types에 존재하지 않는 폼 키를 생성하거나 가정하지 않음
    
    **유형 매칭 요구사항**:
    - "type" 필드가 정확히 "report"인 경우에만 report_phase에 포함
    - "type" 필드가 정확히 "slide"인 경우에만 slide_phase에 포함
    - 위 두 경우를 제외한 모든 폼은 text_phase에 포함 (타입 불문)
    - 입력에 특정 유형의 폼이 없으면 해당 단계는 빈 forms 배열 []을 가져야 함
    - 입력 form_types의 실제 "key" 값만 사용하고, 새로운 것을 만들지 않음
    
    당신의 임무는 모든 폼 유형을 분석하고 다음을 결정하는 최적의 실행 계획을 생성하는 것입니다:
    1. 처리 단계와 순서 (리포트 → 슬라이드 → 텍스트)
    2. 폼 간의 의존성 (논리적 제약 내에서만)
    3. 입력-출력 관계
    
    의존성 규칙:
    - **리포트**: 의존성 없음 (항상 독립적)
    - **슬라이드**: 특정 리포트에 의존 가능 (의미적 매칭)
    - **텍스트**: 특정 리포트에 의존 가능 (의미적 매칭)
    
    **중요**: 응답에 항상 세 단계 (report_phase, slide_phase, text_phase)를 모두 반환하되,
    입력과 매칭되는 실제 폼들로만 forms 배열을 채웁니다.
    빈 단계는 빈 forms 배열 []을 가져야 합니다.
    
    완전한 JSON 실행 계획을 출력하세요:
    {{
        "execution_plan": {{
            "report_phase": {{
                "forms": [
                    {{"key": "report_form_1"}},
                    {{"key": "report_form_2"}}
                ]
            }},
            "slide_phase": {{
                "forms": [
                    {{"key": "slide_form_1", "dependencies": ["report_form_1"]}},
                    {{"key": "slide_form_2", "dependencies": ["report_form_2"]}}
                ]
            }},
            "text_phase": {{
                "forms": [
                    {{"key": "text_form_1", "dependencies": ["report_form_1"]}},
                    {{"key": "text_form_2", "dependencies": ["report_form_2"]}}
                ]
            }}
        }},
        "explanation_text": "### 실행 계획 설명\\n\\n**계획 요약:**\\n- 생성된 계획의 핵심을 3-5줄로 설명\\n\\n**단계 구성 근거:**\\n- report → slide → text 순서를 선택한 이유\\n\\n**의존성 결정 근거:**\\n- 각 slide/text가 어떤 report에 의존하는지의 판단 기준과 매칭 로직"
    }}
    
    슬라이드와 텍스트의 의미적 관계 규칙:
    - **정확한 이름 매칭**: 슬라이드/텍스트와 리포트가 유사한 이름을 가지면 의존성 생성
      (예: "slide_user_guide"는 "report_user_guide"에 의존, "text_user_guide"는 "report_user_guide"에 의존)
    - **키워드 매칭**: 폼 키의 공통 키워드를 기반으로 매칭
      (예: "slide_admin"은 "report_admin"에 의존, "text_technical"은 "report_technical"에 의존)
    - **범위 기반 매칭**: "overview", "summary", "all", "total"을 포함한 폼들은 모든 리포트에 의존
    - **폴백**: 의미적 매칭을 찾지 못하면 슬라이드/텍스트는 사용 가능한 모든 리포트에 의존
    
    중요: 아래 예시 키가 아닌 입력의 실제 폼 키를 사용하세요!
    아래 예시는 형식 참조용이며, 제공된 form_types의 실제 폼 키로 교체하세요.
    
    기억하세요:
    - 슬라이드와 텍스트 모두 의미적 매칭을 사용하여 의존성 결정
    - 입력 form_types에 실제로 존재하는 폼만 사용
    - 매칭되는 폼이 없는 단계는 빈 forms 배열 []을 반환
  expected_output: >
    각 단계의 의존성을 포함하여 각 폼 유형을 정확히 처리하는 방법을 명시하는 완전하고 유효한 JSON 실행 계획.
    계획은 입력 form_types에 실제로 존재하고 정확한 유형과 매칭되는 폼들만 포함해야 합니다.
    매칭되는 폼이 없는 단계는 빈 forms 배열을 가져야 합니다.
  agent: dependency_analyzer 